<template>
  <div class="layout">
    <list class="list">
      <block for="(index,item) in items">
        <list-item type="note" class="list-item" @click="handleClick(index)" @longpress="handleLongPress(index)">
          <text class="title">{{item.title}}</text>
          <text class="content">{{item.content}}</text>
          <text class="time">{{formatTime(item.time)}}</text>
        </list-item>
      </block>
    </list>
    <input class="fixed-btn" type="button" value="+" @click="handleClick('')">
  </div>
</template>

<style>
  .layout {
    flex-direction: column;
  }

  .list {
    flex-direction: column;
  }

  .list-item {
    border-top-width: 1px;
    border-top-color: #eee;
    border-bottom-width: 1px;
    border-bottom-color: #ddd;
    height: 200px;
    flex-direction: column;
    justify-content: center;
    margin-bottom: 10px;
    padding: 0 20px;
  }

  .title {
    font-size: 36px;
    width: 100%;
    text-overflow: ellipsis;
    lines: 1;
    margin-bottom: 10px;
  }

  .content {
    font-size: 20px;
    color: #aaaaaa;
    margin-bottom: 40px;
    text-overflow: ellipsis;
    lines: 1;
  }

  .time {
    font-size: 20px;
    color: #dddddd;
  }

  .fixed-btn {
    color: #ffffff;
    font-size: 50px;
    position: fixed;
    width: 100px;
    height: 100px;
    right: 40px;
    bottom: 40px;
    border-radius: 50px;
    background-color: #519650;
  }
</style>

<script>
  import router from '@system.router'
  import prompt from '@system.prompt'
  var appInfo = require('@system.app').getInfo()

  export default {
    private: {
      items: []
    },
    onMenuPress() {
      prompt.showContextMenu({
        itemList: ['清空数据', '关于', '取消'],
        success: (ret) => {
          switch (ret.index) {
            case 0:
              this.$app.$def.deleteAllData()
              this.items = this.$app.$def.data.items
              break;
            case 1:
              // 关于
              router.push({
                uri: '/About',
                params: { name: appInfo.name, icon: appInfo.icon }
              })
              break;
            case 2:
              // 取消
              break;
            default:
              prompt.showToast({ message: 'error' })
          }
        }
      })
    },
    onShow() {
      console.log('onShow')
      this.items = this.$app.$def.data.items
    },
    formatTime(time) {
      let timeOffset = - (new Date().getTimezoneOffset()) * 60 * 1000
      return new Date(time + timeOffset).toISOString().split('.')[0].replace('T', ' ')
    },
    handleClick(index) {
      router.push({
        uri: '/Edit',
        params: {
          index
        }
      })
    },
    handleLongPress(index) {
      prompt.showContextMenu({
        itemList: [
          '删除',
          '取消'
        ],
        success: (ret) => {
          switch (ret.index) {
            case 0:
              this.$app.$def.deleteDataByIndex(index)
              this.items = this.items = this.$app.$def.data.items
              break;
            case 1:
              break;
          }

        }
      })
    }
  }
</script>